cfg.ALBUMENTATION_AUG_PATH=None
cfg.ANNOT_PATH='./dataset/coco_2/coco_data/coco_annotations.json'
cfg.IMAGE_PATH='./dataset/coco_2/coco_data'
cfg.TRAIN_MODEL_NAME='generic_new_baselines/mask_rcnn_R_101_FPN_400ep_LSJ.py'
cfg.dataloader.evaluator=detectron2.evaluation.COCOEvaluator(dataset_name=None)
cfg.dataloader.test=detectron2.data.build_detection_test_loader(dataset=detectron2.data.get_detection_dataset_dicts(filter_empty=False, names=None), mapper=detectron2.data.DatasetMapper(augmentations=[detectron2.data.transforms.ResizeShortestEdge(max_size=1333, short_edge_length=800)], image_format='BGR', is_train=False), num_workers=4)
cfg.dataloader.train=detectron2.data.build_detection_train_loader(dataset=detectron2.data.get_detection_dataset_dicts(names='generic_new_baselines/mask_rcnn_R_101_FPN_400ep_LSJ.py'), mapper=detectron2.data.DatasetMapper(augmentations=[detectron2.data.transforms.ResizeScale(max_scale=2.0, min_scale=0.1, target_height=1024, target_width=1024),detectron2.data.transforms.FixedSizeCrop(crop_size=[1024,1024]),detectron2.data.transforms.RandomFlip(horizontal=True)], image_format='BGR', is_train=True, recompute_boxes=True, use_instance_mask=True), num_workers=4, total_batch_size=64)
cfg.lr_multiplier=detectron2.solver.WarmupParamScheduler(scheduler=fvcore.common.param_scheduler.MultiStepParamScheduler(milestones=[163889,177546], num_updates=184375, values=[1.0,0.1,0.01]), warmup_factor=0.067, warmup_length=0.002711864406779661)
cfg.model=detectron2.modeling.GeneralizedRCNN(backbone=detectron2.modeling.FPN(bottom_up=detectron2.modeling.backbone.RegNet(block_class=<class 'detectron2.modeling.backbone.regnet.ResBottleneckBlock'>, depth=23, group_width=40, norm='SyncBN', out_features=['s1','s2','s3','s4'], stem_class=<class 'detectron2.modeling.backbone.regnet.SimpleStem'>, stem_width=32, w_0=96, w_a=38.65, w_m=2.43), in_features=['s1','s2','s3','s4'], norm='SyncBN', out_channels=256, top_block=detectron2.modeling.backbone.fpn.LastLevelMaxPool()), input_format='BGR', pixel_mean=[103.53,116.28,123.675], pixel_std=[57.375,57.12,58.395], proposal_generator=detectron2.modeling.proposal_generator.RPN(anchor_generator=detectron2.modeling.anchor_generator.DefaultAnchorGenerator(aspect_ratios=[0.5,1.0,2.0], offset=0.0, sizes=[[32],[64],[128],[256],[512]], strides=[4,8,16,32,64]), anchor_matcher=detectron2.modeling.matcher.Matcher(allow_low_quality_matches=True, labels=[0,-1,1], thresholds=[0.3,0.7]), batch_size_per_image=256, box2box_transform=detectron2.modeling.box_regression.Box2BoxTransform(weights=[1.0,1.0,1.0,1.0]), head=detectron2.modeling.proposal_generator.StandardRPNHead(conv_dims=[-1,-1], in_channels=256, num_anchors=3), in_features=['p2','p3','p4','p5','p6'], nms_thresh=0.7, positive_fraction=0.5, post_nms_topk=[1000,1000], pre_nms_topk=[2000,1000]), roi_heads=detectron2.modeling.StandardROIHeads(batch_size_per_image=512, box_head=detectron2.modeling.roi_heads.FastRCNNConvFCHead(conv_dims=[256,256,256,256], conv_norm=<function <lambda> at 0x7f1d96988d90>, fc_dims=[1024], input_shape=ShapeSpec(channels=256, height=7, width=7, stride=None)), box_in_features=['p2','p3','p4','p5'], box_pooler=detectron2.modeling.poolers.ROIPooler(output_size=7, pooler_type='ROIAlignV2', sampling_ratio=0, scales=[0.25,0.125,0.0625,0.03125]), box_predictor=detectron2.modeling.FastRCNNOutputLayers(box2box_transform=detectron2.modeling.box_regression.Box2BoxTransform(weights=[10,10,5,5]), input_shape=ShapeSpec(channels=1024, height=None, width=None, stride=None), num_classes=80, test_score_thresh=0.05), mask_head=detectron2.modeling.roi_heads.MaskRCNNConvUpsampleHead(conv_dims=[256,256,256,256,256], conv_norm=<function <lambda> at 0x7f1d96988d90>, input_shape=ShapeSpec(channels=256, height=14, width=14, stride=None), num_classes=80), mask_in_features=['p2','p3','p4','p5'], mask_pooler=detectron2.modeling.poolers.ROIPooler(output_size=14, pooler_type='ROIAlignV2', sampling_ratio=0, scales=[0.25,0.125,0.0625,0.03125]), num_classes=80, positive_fraction=0.25, proposal_matcher=detectron2.modeling.matcher.Matcher(allow_low_quality_matches=False, labels=[0,1], thresholds=[0.5])))
cfg.optimizer=torch.optim.SGD(lr=0.1, momentum=0.9, params=detectron2.solver.get_default_optimizer_params(weight_decay_norm=0.0), weight_decay=4e-05)
cfg.train.amp.enabled=True
cfg.train.checkpointer.max_to_keep=100
cfg.train.checkpointer.period=5000
cfg.train.cudnn_benchmark=True
cfg.train.ddp.broadcast_buffers=False
cfg.train.ddp.find_unused_parameters=False
cfg.train.ddp.fp16_compression=True
cfg.train.device='cuda'
cfg.train.eval_period=5000
cfg.train.init_checkpoint=''
cfg.train.log_period=20
cfg.train.max_iter=184375
cfg.train.output_dir='./output'